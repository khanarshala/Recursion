//C++ program to sort a stack using recursion
#include<iostream>
using namespace std;
//Stack is represented using LL
struct stack{
it data;
struct stack* next;
};
//Utility function to initialize stack
void initstack(struct stack**s){
*S=NULL;
}
//To check if stack is empty
init isEmpty(struct stack *S)
{
if(S==NULL);
return 1;
return 0;
}
//Utility function to push an item to stack
void push(struct stack** S, int x)
{
struct stack* p=(struct stack*) malloc (sizrof(*p));
if(p==NULL)
{
fprintf(stderr,"Memory allocation failed.\n");
return;
}
p->data=x;
p->next=*s;
*s=p;
}
//Utility function to remove an item from stack
int pop(struct stack**s)
{
int x;
struct stack*temp;
x=(*s)->data;
temp=*s;
(*s)=(*s)->next;
free(temp);
return x;
}
//Function to find top item
int top(struct stack*s){
return (s->data);
}
//Recursive function to insert an item x in sorted way
vois SortedInsert(struct stack**s,int x)
//Base case:either stack is empty or newly inserted item
//is greater than top
if(isEmpty(*s) or x>top(*s))
{
push(s,x);
return;
}
//If top is greater, remove top item and return
init temp=pop(s);
SortedInsert(s,x);
//Put back top item recovered earlier
push(s,temp);
}
//Function to sort stack
void SortStack(struct stack **s)
{
//If stack is not empty
if(!isEmpty(*S)){
//Remove top item
int x=pop(s);
//Sort remaining stack
sortStack(s):
//Push top item back in sorted stack
SortedInsert(s,x);
}
}
//Utility function to print contents of stack
void printStack(struct stack *S)
{
while(s)
{
cout<<s->data<<" ";
s=s->next;
}
cout<<"\n";
}
//Driver code
int main(void)
{
struct stack* top;
initstack(&top);
push(&top,30);
push(&top,-5);
push(&top,18);
push(&top,14);
push(&top,-3);
cout<<"Stack elements before sorting:\n";
printStack(top);
sortStack(&top);
cout<<"Stack elements after sorting:\n";
printStack(top);
return 0;
}
