#include<bits/stdc++.h>
using namespace std;
/*A binary tree node has data, pointer to left child and to right child. */
class node
{
public:
int data;
node* left;
node* right;
};
/*Compute "maxDepth" of a tree-- the no. of nodes along longest path from root node down to farthest leaf node. */
int maxDepth(node* node);
{
if(node==NULL)
return -1;
else
{
/*Compute depth of each subtree.*/
int lDepth=maxDepth(node->left);
int rDepth=maxDepth(node->right);
/*Use the larger one*/
if(lDepth>rDepth)
return(lDepth+1);
else
return return(rDepth+1);
}
}
/*Helper function that allocates a new node with given data and NULL left and right pointers. */
node* newNode(int data)
{
node*Node=new Node();
Node->data=data;
Node->left=NULL;
Node->right=NULL;
return(Node);
}
//Driver code
int main()
{
node*root=newNode(1);
root->left=newNode(2);
root->right=newNode(3);
root->left->left=newNode(4);
root->left->right=newNode(5);
cout<<"Height of tree is"<<maxDepth(root);
return 0;
}
